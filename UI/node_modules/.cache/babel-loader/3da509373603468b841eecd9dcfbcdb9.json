{"ast":null,"code":"var _jsxFileName = \"/Users/smitvachhani/Desktop/scenestamp/Scene-Stamp/src/Watch.js\";\nimport React from \"react\";\nimport { Player, ControlBar } from \"video-react\";\nimport \"./Watch.css\";\nimport Scene from \"./Scene\";\nexport default class Watch extends React.Component {\n  constructor() {\n    super();\n    this.handleVideoLoad = this.handleVideoLoad.bind(this);\n    this.handleOnSelect = this.handleOnSelect.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.state = {\n      videoFileURL: \"\",\n      videoFileObject: \"\",\n      videoName: \"\",\n      renderQueryData: false,\n      seriesOptions: [{\n        series_name: \"Select Series\"\n      }],\n      episodeOptions: [{\n        episode_name: \"Select Episode\"\n      }],\n      modalOpen: false,\n      seriesFlag: true\n    };\n  }\n\n  componentDidMount() {\n    this.queryForSeries();\n  }\n\n  handleVideoLoad(e) {\n    let files = e.target.files;\n\n    if (files.length === 1) {\n      let file = files[0];\n      this.setState({\n        videoFileURL: URL.createObjectURL(file),\n        videoFileObject: file,\n        videoName: file.name\n      });\n    }\n  }\n\n  handleOnSelect(e) {\n    if (e.target.value == \"Create New Series\" || e.target.value == \"Create New Episode\") {\n      this.displayModal(e.target.value);\n    } else {\n      const data = this.state.seriesOptions;\n\n      for (var elem in data) {\n        if (data[elem].series_name == e.target.value) {\n          this.queryForEpisodes(data[elem].series_id);\n          break;\n        }\n      }\n    }\n  }\n\n  displayModal(type) {\n    if (type == \"Create New Series\") {\n      this.setState({\n        modalOpen: true,\n        seriesFlag: true\n      });\n    } else {\n      this.setState({\n        modalOpen: true,\n        seriesFlag: false\n      });\n    }\n  }\n\n  queryForSeries() {\n    fetch(\"https://scene-stamp-server.herokuapp.com/getSeriesData\").then(response => response.json()).then(data => this.prependAppendSeries(data));\n  }\n\n  queryForEpisodes(id) {\n    fetch(\"https://scene-stamp-server.herokuapp.com/getEpisodeDataFromSeries?series_ids=\" + id).then(response => response.json()).then(data => this.prependAppendEpisodes(data));\n  } // 50519\n\n\n  prependAppendEpisodes(data) {\n    data.unshift({\n      episode_name: \"Create New Episode\"\n    });\n    data.unshift({\n      episode_name: \"Select Episode\"\n    });\n    this.setState({\n      episodeOptions: data\n    });\n  }\n\n  prependAppendSeries(data) {\n    data.unshift({\n      series_name: \"Create New Series\"\n    });\n    data.unshift({\n      series_name: \"Select Series\"\n    });\n    this.setState({\n      seriesOptions: data\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"watch-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.modalOpen ? React.createElement(\"div\", {\n      className: \"watch-modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.state.seriesFlag ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"close\",\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"\\xD7\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"Enter Series Name..\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"watch-series-submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Submit\")))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"close\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"\\xD7\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Some text in the Modal..\")))) : null, React.createElement(\"div\", {\n      className: \"watch-elements-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      onChange: this.handleOnSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.state.seriesOptions.map(element => React.createElement(\"option\", {\n      className: \"watch-element\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, element.series_name))), React.createElement(\"select\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, this.state.episodeOptions.map(element => React.createElement(\"option\", {\n      className: \"watch-element\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, element.episode_name)))), React.createElement(\"div\", {\n      className: \"video\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Player, {\n      ref: \"player\",\n      src: this.state.videoFileURL,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"watch-scenes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Scene, {\n      episode: \"Episode 5 Season 1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(Scene, {\n      episode: \"Epside 1 Season 3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/smitvachhani/Desktop/scenestamp/Scene-Stamp/src/Watch.js"],"names":["React","Player","ControlBar","Scene","Watch","Component","constructor","handleVideoLoad","bind","handleOnSelect","handleClose","state","videoFileURL","videoFileObject","videoName","renderQueryData","seriesOptions","series_name","episodeOptions","episode_name","modalOpen","seriesFlag","componentDidMount","queryForSeries","e","files","target","length","file","setState","URL","createObjectURL","name","value","displayModal","data","elem","queryForEpisodes","series_id","type","fetch","then","response","json","prependAppendSeries","id","prependAppendEpisodes","unshift","render","map","element"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Player, ControlBar } from \"video-react\";\nimport \"./Watch.css\";\nimport Scene from \"./Scene\";\n\nexport default class Watch extends React.Component {\n  constructor() {\n    super();\n    this.handleVideoLoad = this.handleVideoLoad.bind(this);\n    this.handleOnSelect = this.handleOnSelect.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.state = {\n      videoFileURL: \"\",\n      videoFileObject: \"\",\n      videoName: \"\",\n      renderQueryData: false,\n      seriesOptions: [{ series_name: \"Select Series\" }],\n      episodeOptions: [{ episode_name: \"Select Episode\" }],\n      modalOpen: false,\n      seriesFlag: true\n    };\n  }\n  componentDidMount() {\n    this.queryForSeries();\n  }\n  handleVideoLoad(e) {\n    let files = e.target.files;\n    if (files.length === 1) {\n      let file = files[0];\n      this.setState({\n        videoFileURL: URL.createObjectURL(file),\n        videoFileObject: file,\n        videoName: file.name\n      });\n    }\n  }\n  handleOnSelect(e) {\n    if (\n      e.target.value == \"Create New Series\" ||\n      e.target.value == \"Create New Episode\"\n    ) {\n      this.displayModal(e.target.value);\n    } else {\n      const data = this.state.seriesOptions;\n      for (var elem in data) {\n        if (data[elem].series_name == e.target.value) {\n          this.queryForEpisodes(data[elem].series_id);\n          break;\n        }\n      }\n    }\n  }\n  displayModal(type) {\n    if (type == \"Create New Series\") {\n      this.setState({ modalOpen: true, seriesFlag: true });\n    } else {\n      this.setState({ modalOpen: true, seriesFlag: false });\n    }\n  }\n  queryForSeries() {\n    fetch(\"https://scene-stamp-server.herokuapp.com/getSeriesData\")\n      .then(response => response.json())\n      .then(data => this.prependAppendSeries(data));\n  }\n  queryForEpisodes(id) {\n    fetch(\n      \"https://scene-stamp-server.herokuapp.com/getEpisodeDataFromSeries?series_ids=\" +\n        id\n    )\n      .then(response => response.json())\n      .then(data => this.prependAppendEpisodes(data));\n  }\n\n  // 50519\n  prependAppendEpisodes(data) {\n    data.unshift({ episode_name: \"Create New Episode\" });\n    data.unshift({ episode_name: \"Select Episode\" });\n    this.setState({ episodeOptions: data });\n  }\n\n  prependAppendSeries(data) {\n    data.unshift({ series_name: \"Create New Series\" });\n    data.unshift({ series_name: \"Select Series\" });\n    this.setState({ seriesOptions: data });\n  }\n  render() {\n    return (\n      <div className=\"watch-container\">\n        {this.state.modalOpen ? (\n          <div className=\"watch-modal\">\n            <div className=\"modal-content\">\n              {this.state.seriesFlag ? (\n                <div>\n                  <span className=\"close\" onClick={this.handleClose}>\n                    &times;\n                  </span>\n                  <div>\n                    <form>\n                      <input placeholder=\"Enter Series Name..\" />\n                      <button className=\"watch-series-submit\">Submit</button>\n                    </form>\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  <span class=\"close\">&times;</span>\n                  <p>Some text in the Modal..</p>\n                </div>\n              )}\n            </div>\n          </div>\n        ) : null}\n        <div className=\"watch-elements-container\">\n          <select onChange={this.handleOnSelect}>\n            {this.state.seriesOptions.map(element => (\n              <option className=\"watch-element\">{element.series_name}</option>\n            ))}\n          </select>\n          <select>\n            {this.state.episodeOptions.map(element => (\n              <option className=\"watch-element\">{element.episode_name}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"video\">\n          <Player ref=\"player\" src={this.state.videoFileURL} />\n        </div>\n        <div className=\"watch-scenes\">\n          <Scene episode=\"Episode 5 Season 1\" />\n          <Scene episode=\"Epside 1 Season 3\" />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}