{"ast":null,"code":"var _jsxFileName = \"/Users/smitvachhani/Desktop/scenestamp/Scene-Stamp/src/Watch.js\";\nimport React from \"react\";\nimport { Player, ControlBar } from \"video-react\";\nimport \"./Watch.css\";\nimport Scene from \"./Scene\";\nexport default class Watch extends React.Component {\n  constructor() {\n    super();\n    this.handleVideoLoad = this.handleVideoLoad.bind(this);\n    this.handleOnSelect = this.handleOnSelect.bind(this);\n    this.state = {\n      videoFileURL: \"\",\n      videoFileObject: \"\",\n      videoName: \"\",\n      renderQueryData: false,\n      seriesOptions: [{\n        series_name: \"Select Series\"\n      }],\n      episodeOptions: [{\n        episode_name: \"Select Episode\"\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.queryForSeries();\n  }\n\n  handleVideoLoad(e) {\n    let files = e.target.files;\n\n    if (files.length === 1) {\n      let file = files[0];\n      this.setState({\n        videoFileURL: URL.createObjectURL(file),\n        videoFileObject: file,\n        videoName: file.name\n      });\n    }\n  }\n\n  handleOnSelect(e) {\n    if (e.target.value == \"Create New Series\" || e.target.value == \"Create New Episode\") {} else {\n      const data = this.state.seriesOptions;\n\n      for (var elem in data) {\n        if (data[elem].series_name == e.target.value) {\n          this.queryForEpisodes(data[elem].series_id);\n          break;\n        }\n      }\n    }\n  }\n\n  queryForSeries() {\n    fetch(\"https://scene-stamp-server.herokuapp.com/getSeriesData\").then(response => response.json()).then(data => this.prependAppendSeries(data));\n  }\n\n  queryForEpisodes(id) {\n    fetch(\"https://scene-stamp-server.herokuapp.com/getEpisodeDataFromSeries?series_ids=\" + id).then(response => response.json()).then(data => this.prependAppendEpisodes(data));\n  } // 50519\n\n\n  prependAppendEpisodes(data) {\n    data.unshift({\n      episode_name: \"Create New Episode\"\n    });\n    data.unshift({\n      episode_name: \"Select Episode\"\n    });\n    this.setState({\n      episodeOptions: data\n    });\n  }\n\n  prependAppendSeries(data) {\n    data.unshift({\n      series_name: \"Create New Series\"\n    });\n    data.unshift({\n      series_name: \"Select Series\"\n    });\n    this.setState({\n      seriesOptions: data\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"watch-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"watch-elements-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      onChange: this.handleOnSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.seriesOptions.map(element => React.createElement(\"option\", {\n      className: \"watch-element\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, element.series_name))), React.createElement(\"select\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.state.episodeOptions.map(element => React.createElement(\"option\", {\n      className: \"watch-element\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, element.episode_name)))), React.createElement(\"div\", {\n      className: \"video\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Player, {\n      ref: \"player\",\n      src: this.state.videoFileURL,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"watch-scenes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Scene, {\n      episode: \"Episode 5 Season 1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(Scene, {\n      episode: \"Epside 1 Season 3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/smitvachhani/Desktop/scenestamp/Scene-Stamp/src/Watch.js"],"names":["React","Player","ControlBar","Scene","Watch","Component","constructor","handleVideoLoad","bind","handleOnSelect","state","videoFileURL","videoFileObject","videoName","renderQueryData","seriesOptions","series_name","episodeOptions","episode_name","componentDidMount","queryForSeries","e","files","target","length","file","setState","URL","createObjectURL","name","value","data","elem","queryForEpisodes","series_id","fetch","then","response","json","prependAppendSeries","id","prependAppendEpisodes","unshift","render","map","element"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,aAAnC;AACA,OAAO,aAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,eAAe,MAAMC,KAAN,SAAoBJ,KAAK,CAACK,SAA1B,CAAoC;AACjDC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKE,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE,EADH;AAEXC,MAAAA,eAAe,EAAE,EAFN;AAGXC,MAAAA,SAAS,EAAE,EAHA;AAIXC,MAAAA,eAAe,EAAE,KAJN;AAKXC,MAAAA,aAAa,EAAE,CAAC;AAAEC,QAAAA,WAAW,EAAE;AAAf,OAAD,CALJ;AAMXC,MAAAA,cAAc,EAAE,CAAC;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OAAD;AANL,KAAb;AAQD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,cAAL;AACD;;AACDb,EAAAA,eAAe,CAACc,CAAD,EAAI;AACjB,QAAIC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAArB;;AACA,QAAIA,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtB,UAAIC,IAAI,GAAGH,KAAK,CAAC,CAAD,CAAhB;AACA,WAAKI,QAAL,CAAc;AACZf,QAAAA,YAAY,EAAEgB,GAAG,CAACC,eAAJ,CAAoBH,IAApB,CADF;AAEZb,QAAAA,eAAe,EAAEa,IAFL;AAGZZ,QAAAA,SAAS,EAAEY,IAAI,CAACI;AAHJ,OAAd;AAKD;AACF;;AACDpB,EAAAA,cAAc,CAACY,CAAD,EAAI;AAChB,QACEA,CAAC,CAACE,MAAF,CAASO,KAAT,IAAkB,mBAAlB,IACAT,CAAC,CAACE,MAAF,CAASO,KAAT,IAAkB,oBAFpB,EAGE,CACD,CAJD,MAIO;AACL,YAAMC,IAAI,GAAG,KAAKrB,KAAL,CAAWK,aAAxB;;AACA,WAAK,IAAIiB,IAAT,IAAiBD,IAAjB,EAAuB;AACrB,YAAIA,IAAI,CAACC,IAAD,CAAJ,CAAWhB,WAAX,IAA0BK,CAAC,CAACE,MAAF,CAASO,KAAvC,EAA8C;AAC5C,eAAKG,gBAAL,CAAsBF,IAAI,CAACC,IAAD,CAAJ,CAAWE,SAAjC;AACA;AACD;AACF;AACF;AACF;;AACDd,EAAAA,cAAc,GAAG;AACfe,IAAAA,KAAK,CAAC,wDAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQL,IAAI,IAAI,KAAKQ,mBAAL,CAAyBR,IAAzB,CAFhB;AAGD;;AACDE,EAAAA,gBAAgB,CAACO,EAAD,EAAK;AACnBL,IAAAA,KAAK,CACH,kFACEK,EAFC,CAAL,CAIGJ,IAJH,CAIQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJpB,EAKGF,IALH,CAKQL,IAAI,IAAI,KAAKU,qBAAL,CAA2BV,IAA3B,CALhB;AAMD,GAvDgD,CAyDjD;;;AACAU,EAAAA,qBAAqB,CAACV,IAAD,EAAO;AAC1BA,IAAAA,IAAI,CAACW,OAAL,CAAa;AAAExB,MAAAA,YAAY,EAAE;AAAhB,KAAb;AACAa,IAAAA,IAAI,CAACW,OAAL,CAAa;AAAExB,MAAAA,YAAY,EAAE;AAAhB,KAAb;AACA,SAAKQ,QAAL,CAAc;AAAET,MAAAA,cAAc,EAAEc;AAAlB,KAAd;AACD;;AAEDQ,EAAAA,mBAAmB,CAACR,IAAD,EAAO;AACxBA,IAAAA,IAAI,CAACW,OAAL,CAAa;AAAE1B,MAAAA,WAAW,EAAE;AAAf,KAAb;AACAe,IAAAA,IAAI,CAACW,OAAL,CAAa;AAAE1B,MAAAA,WAAW,EAAE;AAAf,KAAb;AACA,SAAKU,QAAL,CAAc;AAAEX,MAAAA,aAAa,EAAEgB;AAAjB,KAAd;AACD;;AACDY,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,QAAQ,EAAE,KAAKlC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKC,KAAL,CAAWK,aAAX,CAAyB6B,GAAzB,CAA6BC,OAAO,IACnC;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmCA,OAAO,CAAC7B,WAA3C,CADD,CADH,CADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKN,KAAL,CAAWO,cAAX,CAA0B2B,GAA1B,CAA8BC,OAAO,IACpC;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmCA,OAAO,CAAC3B,YAA3C,CADD,CADH,CANF,CADF,EAaE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAC,QAAZ;AAAqB,MAAA,GAAG,EAAE,KAAKR,KAAL,CAAWC,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAbF,EAgBE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAhBF,CADF;AAuBD;;AA7FgD","sourcesContent":["import React from \"react\";\nimport { Player, ControlBar } from \"video-react\";\nimport \"./Watch.css\";\nimport Scene from \"./Scene\";\n\nexport default class Watch extends React.Component {\n  constructor() {\n    super();\n    this.handleVideoLoad = this.handleVideoLoad.bind(this);\n    this.handleOnSelect = this.handleOnSelect.bind(this);\n    this.state = {\n      videoFileURL: \"\",\n      videoFileObject: \"\",\n      videoName: \"\",\n      renderQueryData: false,\n      seriesOptions: [{ series_name: \"Select Series\" }],\n      episodeOptions: [{ episode_name: \"Select Episode\" }]\n    };\n  }\n  componentDidMount() {\n    this.queryForSeries();\n  }\n  handleVideoLoad(e) {\n    let files = e.target.files;\n    if (files.length === 1) {\n      let file = files[0];\n      this.setState({\n        videoFileURL: URL.createObjectURL(file),\n        videoFileObject: file,\n        videoName: file.name\n      });\n    }\n  }\n  handleOnSelect(e) {\n    if (\n      e.target.value == \"Create New Series\" ||\n      e.target.value == \"Create New Episode\"\n    ) {\n    } else {\n      const data = this.state.seriesOptions;\n      for (var elem in data) {\n        if (data[elem].series_name == e.target.value) {\n          this.queryForEpisodes(data[elem].series_id);\n          break;\n        }\n      }\n    }\n  }\n  queryForSeries() {\n    fetch(\"https://scene-stamp-server.herokuapp.com/getSeriesData\")\n      .then(response => response.json())\n      .then(data => this.prependAppendSeries(data));\n  }\n  queryForEpisodes(id) {\n    fetch(\n      \"https://scene-stamp-server.herokuapp.com/getEpisodeDataFromSeries?series_ids=\" +\n        id\n    )\n      .then(response => response.json())\n      .then(data => this.prependAppendEpisodes(data));\n  }\n\n  // 50519\n  prependAppendEpisodes(data) {\n    data.unshift({ episode_name: \"Create New Episode\" });\n    data.unshift({ episode_name: \"Select Episode\" });\n    this.setState({ episodeOptions: data });\n  }\n\n  prependAppendSeries(data) {\n    data.unshift({ series_name: \"Create New Series\" });\n    data.unshift({ series_name: \"Select Series\" });\n    this.setState({ seriesOptions: data });\n  }\n  render() {\n    return (\n      <div className=\"watch-container\">\n        <div className=\"watch-elements-container\">\n          <select onChange={this.handleOnSelect}>\n            {this.state.seriesOptions.map(element => (\n              <option className=\"watch-element\">{element.series_name}</option>\n            ))}\n          </select>\n          <select>\n            {this.state.episodeOptions.map(element => (\n              <option className=\"watch-element\">{element.episode_name}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"video\">\n          <Player ref=\"player\" src={this.state.videoFileURL} />\n        </div>\n        <div className=\"watch-scenes\">\n          <Scene episode=\"Episode 5 Season 1\" />\n          <Scene episode=\"Epside 1 Season 3\" />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}